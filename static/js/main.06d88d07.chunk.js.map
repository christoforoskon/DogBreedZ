{"version":3,"sources":["components/Card.js","components/CardList.js","components/SeachBox.js","components/Scroll.js","dogs.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","breed","country","foto_path","className","alt","src","CardList","dogs","map","dog","i","key","id","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","console","log","setState","target","value","state","this","filteredDogs","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sRAgBeA,G,MAbF,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UACnC,OACE,yBAAKC,UAAU,uDACb,yBAAKA,UAAU,MAAMC,IAAI,OAAOC,IAAKH,IACrC,6BACE,4BAAKH,GACL,2BAAIC,GACJ,2BAAIC,OCaGK,EApBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClB,OACE,6BAEIA,EAAKC,KAAI,SAACC,EAAKC,GACb,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLE,GAAIL,EAAKG,GAAGE,GACZZ,MAAOO,EAAKG,GAAGV,MACfC,QAASM,EAAKG,GAAGT,QACjBC,UAAWK,EAAKG,GAAGR,iBCClBW,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,yBAAKZ,UAAU,OACb,2BACEA,UAAU,gCACVa,KAAK,SACLC,YAAY,eACZC,SAAUH,MCCHI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCLAlB,EAAO,CAClB,CACEK,GAAI,EACJZ,MAAO,oBACPC,QAAS,YACTC,UAAW,mFAEb,CACEU,GAAI,EACJZ,MAAO,kBACPC,QAAS,SACTC,UAAW,mFAEb,CACEU,GAAI,EACJZ,MAAO,mBACPC,QAAS,UACTC,UAAW,8EAEb,CACEU,GAAI,EACJZ,MAAO,yBACPC,QAAS,UACTC,UAAW,+EAEb,CACEU,GAAI,EACJZ,MAAO,YACPC,QAAS,QACTC,UAAW,0ECgBAwB,G,wDArCb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEjB,YAAac,EAAMI,OAAOC,SAd1C,EAAKC,MAAQ,CACX3B,KAAMA,EACNO,YAAa,IAJH,E,qDAkBJ,IAAD,EACuBqB,KAAKD,MAA3B3B,EADD,EACCA,KAAMO,EADP,EACOA,YACRsB,EAAe7B,EAAK8B,QAAO,SAAA5B,GAC/B,OAAOA,EAAIR,QAAQqC,cAAcC,SAASzB,EAAYwB,kBAGxD,OADAT,QAAQC,IAAIM,GAEV,yBAAKjC,UAAU,MACb,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CAAWY,aAAcoB,KAAKR,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUpB,KAAM6B,U,GA9BRI,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,EAAD,MACEC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.06d88d07.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({name, breed, country, foto_path}) => {\r\n  return (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img className='img' alt='dogs' src={foto_path}></img>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{breed}</p>\r\n        <p>{country}</p>\r\n      </div>\r\n    </div>\r\n  );  \r\n} \r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ dogs }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        dogs.map((dog, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={dogs[i].id}\r\n              breed={dogs[i].breed}\r\n              country={dogs[i].country}\r\n              foto_path={dogs[i].foto_path}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search breed' \r\n        onChange={searchChange}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '700px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","export const dogs = [\r\n  {\r\n    id: 0,\r\n    breed: 'Australian Kelpie',\r\n    country: 'Australia',\r\n    foto_path: 'https://www.dogsindepth.com/herding_dog_breeds/images/australian_kelpie_h02.jpg'\r\n  },\r\n  {\r\n    id: 1,\r\n    breed: 'Fila Brasiliero',\r\n    country: 'Brazil',\r\n    foto_path: 'https://www.dogsindepth.com/molossoid_dog_breeds/images/fila_brasiliero_v02.jpg'\r\n  },\r\n  {\r\n    id: 2,\r\n    breed: 'Brussels Griffon',\r\n    country: 'Belgium',\r\n    foto_path: 'https://www.dogsindepth.com/toy_dog_breeds/images/brussels_griffon_h02.jpg'\r\n  },\r\n  {\r\n    id: 3,\r\n    breed: 'Dalmatian (Dalmatinac)',\r\n    country: 'Croatia',\r\n    foto_path: 'https://www.dogsindepth.com/nonsporting_dog_breeds/images/dalmatian_h04.jpg'\r\n  },\r\n  {\r\n    id: 4,\r\n    breed: 'Greyhound',\r\n    country: 'Egypt',\r\n    foto_path: 'https://www.dogsindepth.com/hound_dog_breeds/images/greyhound_h05.jpg'\r\n  },\r\n]","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SeachBox';\r\nimport Scroll from '../components/Scroll';\r\nimport { dogs } from '../dogs';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      dogs: dogs,\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   fetch()\r\n  //   .then(response=> response.json())\r\n  //   .then(dogs => {this.setState({dogs: dogs})})\r\n  // }\r\n\r\n  onSearchChange = (event) => {\r\n    console.log(event);\r\n    this.setState({ searchfield: event.target.value });\r\n  }\r\n  render() {\r\n    const { dogs, searchfield } = this.state;\r\n    const filteredDogs = dogs.filter(dog => {\r\n      return dog.country.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n    console.log(filteredDogs);\r\n    return (\r\n      <div className='tc'>\r\n        <h1 className='f1'>Dog breedZ</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <CardList dogs={filteredDogs} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <App />\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}